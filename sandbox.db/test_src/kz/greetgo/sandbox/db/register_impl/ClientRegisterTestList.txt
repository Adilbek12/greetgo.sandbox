. able to insert into table Charm - ok ? insertTableCharm_ok
. able to insert into table Client - ok insertTableClient_ok
KEY CONSTRAINTS BEGIN
. pk Charm.id to fk Client.charm existence - ok pkCharmIdFkClientCharm_exist
. pk (client, type) of Client_Addr existence - test
. pk (client, number) of Client_Phone existence - test
. pk Client.id to fk Client_Addr.client existence - test
. pk Client.id to fk Client_Phone.client existence - test
. pk Client.id to fk Client_Account.client existence - test
. pk Client_Account.id to fk Client_Account_Transaction.account existence - test
. pk Transaction_Type.id to fk Client_Account_Transaction.type existence - test
KEY CONSTRAINTS END
ClientRegister BEGIN
. getCount(null) exception - ok
. getCount("") default record count - ok
. getCount("Нур") filtered record count - ok
. getCount("нУР") record count doesn't depend on letter case - ok
OTHER METHOD
. getRecordList(ClientRecordListRequest.clientRecordCountToSkip = -10) exception - ok
. getRecordList(ClientRecordListRequest.clientRecordCount = 0) exception - ok
. getRecordList(ClientRecordListRequest.clientRecordCount = -10) exception - ok
. getRecordList(ClientRecordListRequest) record count of default request - ok
  clientRecordCountToSkip >= 0
  clientRecordCount > 0
  columnSortType = NONE
  sortAscend = false || true
  nameFilter = ""
. getRecordList(ClientRecordListRequest) record count of default request with pagination at the beginning #1 - ok
  clientRecordCountToSkip > 0
  clientRecordCount > 0
  columnSortType = NONE
  sortAscend = false || true
  nameFilter = ""
. getRecordList(ClientRecordListRequest) record count of default request with pagination in the middle #2 - ok
  clientRecordCountToSkip > 0
  clientRecordCount > 0
  columnSortType = NONE
  sortAscend = false || true
  nameFilter = ""
. getRecordList(ClientRecordListRequest) record count of default request with pagination at the end #3 - ok
  clientRecordCountToSkip > 0
  clientRecordCount > 0
  columnSortType = NONE
  sortAscend = false || true
  nameFilter = ""
. getRecordList(ClientRecordListRequest) record count and values sequence of sorting only - ok
  clientRecordCountToSkip >= 0
  clientRecordCount > 0
  columnSortType = AGE
  sortAscend = false
  nameFilter = ""
. getRecordList(ClientRecordListRequest) record count and values sequence of sorting only - ok
  clientRecordCountToSkip >= 0
  clientRecordCount > 0
  columnSortType = AGE
  sortAscend = true
  nameFilter = ""
. getRecordList(ClientRecordListRequest) record count and values sequence of sorting only - ok
  clientRecordCountToSkip >= 0
  clientRecordCount > 0
  columnSortType = TOTALACCOUNTBALANCE
  sortAscend = false
  nameFilter = ""
. getRecordList(ClientRecordListRequest) record count and values sequence of sorting only - ok
  clientRecordCountToSkip >= 0
  clientRecordCount > 0
  columnSortType = TOTALACCOUNTBALANCE
  sortAscend = true
  nameFilter = ""
. getRecordList(ClientRecordListRequest) record count and values sequence of sorting only - ok
  clientRecordCountToSkip >= 0
  clientRecordCount > 0
  columnSortType = MAXACCOUNTBALANCE
  sortAscend = false
  nameFilter = ""
. getRecordList(ClientRecordListRequest) record count and values sequence of sorting only - ok
  clientRecordCountToSkip >= 0
  clientRecordCount > 0
  columnSortType = MAXACCOUNTBALANCE
  sortAscend = true
  nameFilter = ""
. getRecordList(ClientRecordListRequest) record count and values sequence of sorting only - ok
  clientRecordCountToSkip >= 0
  clientRecordCount > 0
  columnSortType = MINACCOUNTBALANCE
  sortAscend = false
  nameFilter = ""
. getRecordList(ClientRecordListRequest) record count and values sequence of sorting only - ok
  clientRecordCountToSkip >= 0
  clientRecordCount > 0
  columnSortType = MINACCOUNTBALANCE
  sortAscend = true
  nameFilter = ""
. getRecordList(ClientRecordListRequest) record count and values of default filter only - ok
  clientRecordCountToSkip >= 0
  clientRecordCount > 0
  columnSortType = NONE
  sortAscend = false || true
  nameFilter = ""
. getRecordList(ClientRecordListRequest) record count and values of filter only - ok
  clientRecordCountToSkip >= 0
  clientRecordCount > 0
  columnSortType = NONE
  sortAscend = false || true
  nameFilter = "ва"
. getRecordList(ClientRecordListRequest) record count and values of filter only - ok
  clientRecordCountToSkip >= 0
  clientRecordCount > 0
  columnSortType = NONE
  sortAscend = false || true
  nameFilter = "иГоР"
OTHER METHOD
. removeRecord(-10) exception - test ?
. removeRecord(long) x1 record count - test
. removeRecord(long) x5 record count - test
OTHER METHOD
. getDetails(-10) exception - test ?
. getDetails(null) value - test
. getDetails(3) value - test
. getDetails(12) value - test
OTHER METHOD
. saveDetails(ClientDetailsToSave)
need more for saveDetails



  /*
    private ClientAccountHelper generateAndInsertClientAccount(long clientId) {
      long id = clientTestDao.get().selectSeqIdNextValueTableClientAccount();
      long money = ThreadLocalRandom.current().nextLong(-50000, 50000);

      clientTestDao.get().insertClientAccount(id, clientId, money,
        Util.generateString(8, true), Util.generateTimestamp());

      ClientAccountHelper clientAccountHelper = new ClientAccountHelper();
      clientAccountHelper.id = id;
      clientAccountHelper.money = money;

      return clientAccountHelper;
    }

    private List<ClientAccountHelper> generateAndInsertClientAccounts(long clientAccountCount, long clientId) {
      List<ClientAccountHelper> clientAccountHelperList = new ArrayList<>();

      for (long i = 0; i < clientAccountCount; i++) {
        clientAccountHelperList.add(this.generateAndInsertClientAccount(clientId));
      }

      return clientAccountHelperList;
    }


      // TODO: finish writing helper methods
      // TODO: refactor testing
      private ClientRecord declareAndInsertClient(long id, String surname, String name, String patronymic, String gender,
                                                  LocalDate date, int charmId) {
        Random random = new Random();
        List<ClientAccountHelper> clientAccountHelperList =
          this.generateAndInsertClientAccounts(random.nextInt(5) + 2, id);
        long totalAccountBalance = clientAccountHelperList.stream().mapToLong(h -> h.money).max().getAsLong();
        long minAccountBalance = clientAccountHelperList.stream().mapToLong(h -> h.money).min().getAsLong();
        long maxAccountBalance = clientAccountHelperList.stream().mapToLong(h -> h.money).max().getAsLong();

        ClientRecord clientRecord = new ClientRecord();
        clientRecord.id = id;
        clientRecord.fullName = surname + " " + name + " " + patronymic;
        clientRecord.charmName = clientTestDao.get().selectNameByIdTableCharm(charmId);
        clientRecord.age = Util.calculateAge(date, LocalDate.now());
        clientRecord.totalAccountBalance = totalAccountBalance;
        clientRecord.minAccountBalance = minAccountBalance;
        clientRecord.maxAccountBalance = maxAccountBalance;

        clientTestDao.get().insertClient(id, surname, name, patronymic, gender, Date.valueOf(date), charmId);

        return clientRecord;
      }

      private ClientRecord declareAndInsertClient(long id, String surname, String name, String patronymic, String gender,
                                                  LocalDate date, int charmId, List<ClientAccountHelper> clientAccountHelperList) {
        long totalAccountBalance = clientAccountHelperList.stream().mapToLong(h -> h.money).max().getAsLong();
        long minAccountBalance = clientAccountHelperList.stream().mapToLong(h -> h.money).min().getAsLong();
        long maxAccountBalance = clientAccountHelperList.stream().mapToLong(h -> h.money).max().getAsLong();

        ClientRecord clientRecord = new ClientRecord();
        clientRecord.id = id;
        clientRecord.fullName = surname + " " + name + " " + patronymic;
        clientRecord.charmName = clientTestDao.get().selectNameByIdTableCharm(charmId);
        clientRecord.age = Util.calculateAge(date, LocalDate.now());
        clientRecord.totalAccountBalance = totalAccountBalance;
        clientRecord.minAccountBalance = minAccountBalance;
        clientRecord.maxAccountBalance = maxAccountBalance;

        clientTestDao.get().insertClient(id, surname, name, patronymic, gender, Date.valueOf(date), charmId);

        return clientRecord;
      }

    private ClientRecord generateAndInsertClient(List<CharmHelper> charmHelperList) {
      Random random = new Random();
      long id = clientTestDao.get().selectSeqIdNextValueTableClient();
      String surname = Util.generateString(random.nextInt(5) + 5, false);
      String name = Util.generateString(random.nextInt(5) + 5, false);
      String patronymic = Util.generateString(random.nextInt(10) + 5, false);
      String gender = Gender.values()[random.nextInt(Gender.values().length)].name();
      LocalDate date = Util.generateLocalDate();
      int charmId = charmHelperList.get(random.nextInt(charmHelperList.size())).id;

      List<ClientAccountHelper> clientAccountHelperList =
        this.generateAndInsertClientAccounts(random.nextInt(5) + 2, id);
      long totalAccountBalance = clientAccountHelperList.stream().mapToLong(h -> h.money).max().getAsLong();
      long minAccountBalance = clientAccountHelperList.stream().mapToLong(h -> h.money).min().getAsLong();
      long maxAccountBalance = clientAccountHelperList.stream().mapToLong(h -> h.money).max().getAsLong();

      ClientRecord clientRecord = new ClientRecord();
      clientRecord.id = id;
      clientRecord.fullName = surname + " " + name + " " + patronymic;
      clientRecord.charmName = clientTestDao.get().selectNameByIdTableCharm(charmId);
      clientRecord.age = 0;
      clientRecord.totalAccountBalance = 0;
      clientRecord.minAccountBalance = 0;
      clientRecord.maxAccountBalance = 0;

      clientTestDao.get().insertClient(id, surname, name, patronymic, gender, Date.valueOf(date), charmId);

      return clientRecord;
    }

    private List<ClientRecord> generateAndInsertClients(long clientCount, List<CharmHelper> charmHelperList) {
      List<ClientRecord> clientRecordList = new ArrayList<>();

      for (long i = 0; i < clientCount; i++) {
        clientRecordList.add(this.generateAndInsertClient(charmHelperList));
      }

      return clientRecordList;
    }
  */